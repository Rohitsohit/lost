{"ast":null,"code":"var _jsxFileName = \"/Users/rohit/Desktop/lost/Frontend/src/components/ChatBoxLayout.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { format } from \"timeago.js\";\nimport { addMessage, getMessages } from '../actions/chatActions';\nimport { getUserDetails } from '../actions/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatBoxLayout({\n  chat,\n  loggedInUser,\n  setSendMessage,\n  receivedMessage\n}) {\n  _s();\n  const [reciverDetails, setReciverDetails] = useState();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const scroll = useRef();\n  useEffect(() => {\n    if (chat) {\n      const userId = chat.members.find(id => id !== loggedInUser);\n      fetchUserDetails(userId);\n    }\n  }, [chat]);\n  const fetchUserDetails = async id => {\n    // const data = await getUserDetails(id);\n    // setReciverDetails(data);\n  };\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        // const data = await getMessages(chat._id);\n        // setMessages(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    if (chat !== null) fetchMessages();\n  }, [chat]);\n  const handleChange = e => {\n    setNewMessage(e.target.value);\n  };\n  const handleClick = async e => {\n    e.preventDefault();\n    if (!newMessage.trim()) {\n      return;\n    }\n    const textMessage = {\n      senderId: loggedInUser,\n      text: newMessage,\n      chatId: chat._id\n    };\n    const receiverId = chat.members.find(id => id !== loggedInUser);\n    setSendMessage({\n      ...textMessage,\n      receiverId\n    });\n    try {\n      // const data = await addMessage(textMessage);\n      // setMessages([...messages, data]);\n      setNewMessage(\"\");\n    } catch {\n      console.log(\"error\");\n    }\n  };\n  useEffect(() => {\n    if (receivedMessage != null && receivedMessage.chatId === chat._id) {\n      setMessages([...messages, receivedMessage]);\n    }\n  }, [receivedMessage]);\n  useEffect(() => {\n    var _scroll$current;\n    (_scroll$current = scroll.current) === null || _scroll$current === void 0 ? void 0 : _scroll$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"ChatBoxLayout\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatBoxLayout, \"d17aQNnCnkLhT5jXRWJpf9jXKLo=\");\n_c = ChatBoxLayout;\nvar _c;\n$RefreshReg$(_c, \"ChatBoxLayout\");","map":{"version":3,"names":["React","useEffect","useRef","useState","format","addMessage","getMessages","getUserDetails","jsxDEV","_jsxDEV","ChatBoxLayout","chat","loggedInUser","setSendMessage","receivedMessage","_s","reciverDetails","setReciverDetails","messages","setMessages","newMessage","setNewMessage","scroll","userId","members","find","id","fetchUserDetails","fetchMessages","error","console","log","handleChange","e","target","value","handleClick","preventDefault","trim","textMessage","senderId","text","chatId","_id","receiverId","_scroll$current","current","scrollIntoView","behavior","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rohit/Desktop/lost/Frontend/src/components/ChatBoxLayout.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { format } from \"timeago.js\";\nimport { addMessage, getMessages } from '../actions/chatActions';\nimport { getUserDetails } from '../actions/auth';\nexport default function ChatBoxLayout({ chat, loggedInUser, setSendMessage, receivedMessage }) {\n\n    const [reciverDetails, setReciverDetails] = useState();\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessage] = useState(\"\");\n    const scroll = useRef();\n\n    useEffect(() => {\n        if (chat) {\n            const userId = chat.members.find((id) => id !== loggedInUser);\n            fetchUserDetails(userId);\n        }\n    }, [chat]);\n\n    const fetchUserDetails = async (id) => {\n        // const data = await getUserDetails(id);\n        // setReciverDetails(data);\n    };\n\n    useEffect(() => {\n        const fetchMessages = async () => {\n            try {\n                // const data = await getMessages(chat._id);\n                // setMessages(data);\n            } catch (error) {\n                console.log(error);\n            }\n        };\n\n        if (chat !== null) fetchMessages();\n    }, [chat]);\n\n    const handleChange = (e) => {\n        setNewMessage(e.target.value);\n    };\n\n    const handleClick = async (e) => {\n        e.preventDefault();\n\n        if (!newMessage.trim()) {\n            return;\n        }\n\n        const textMessage = {\n            senderId: loggedInUser,\n            text: newMessage,\n            chatId: chat._id,\n        };\n\n        const receiverId = chat.members.find((id) => id !== loggedInUser);\n\n        setSendMessage({ ...textMessage, receiverId });\n\n        try {\n            // const data = await addMessage(textMessage);\n            // setMessages([...messages, data]);\n            setNewMessage(\"\");\n        } catch {\n            console.log(\"error\");\n        }\n    };\n\n    useEffect(() => {\n        if (receivedMessage != null && receivedMessage.chatId === chat._id) {\n            setMessages([...messages, receivedMessage]);\n        }\n    }, [receivedMessage]);\n\n    useEffect(() => {\n        scroll.current?.scrollIntoView({ behavior: \"smooth\" });\n    }, [messages]);\n\n    return (\n        <div>ChatBoxLayout</div>\n    )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}