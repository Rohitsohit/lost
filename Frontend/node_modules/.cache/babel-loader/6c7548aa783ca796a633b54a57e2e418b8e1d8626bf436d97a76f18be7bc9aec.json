{"ast":null,"code":"import React from 'react';\n// import { format } from \"timeago.js\";\n// import { addMessage, getMessages } from '../actions/chatActions';\n// import { getUserDetails } from '../actions/auth';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatBox({\n  chat,\n  loggedInUser,\n  setSendMessage,\n  receivedMessage\n}) {\n  // const [reciverDetails, setReciverDetails] = useState();\n  // const [messages, setMessages] = useState([]);\n  // const [newMessage, setNewMessage] = useState(\"\");\n  // const scroll = useRef();\n\n  // useEffect(() => {\n  //   if (chat) {\n  //     const userId = chat.members.find((id) => id !== loggedInUser);\n  //     fetchUserDetails(userId);\n  //   }\n  // }, [chat]);\n\n  // const fetchUserDetails = async (id) => {\n  //   // const data = await getUserDetails(id);\n  //   // setReciverDetails(data);\n  // };\n\n  // useEffect(() => {\n  //   const fetchMessages = async () => {\n  //     try {\n  //       // const data = await getMessages(chat._id);\n  //       // setMessages(data);\n  //     } catch (error) {\n  //       console.log(error);\n  //     }\n  //   };\n\n  //   if (chat !== null) fetchMessages();\n  // }, [chat]);\n\n  // const handleChange = (e) => {\n  //   setNewMessage(e.target.value);\n  // };\n\n  // const handleClick = async (e) => {\n  //   e.preventDefault();\n\n  //   if (!newMessage.trim()) {\n  //     return;\n  //   }\n\n  //   const textMessage = {\n  //     senderId: loggedInUser,\n  //     text: newMessage,\n  //     chatId: chat._id,\n  //   };\n\n  //   const receiverId = chat.members.find((id) => id !== loggedInUser);\n\n  //   setSendMessage({ ...textMessage, receiverId });\n\n  //   try {\n  //     // const data = await addMessage(textMessage);\n  //     // setMessages([...messages, data]);\n  //     setNewMessage(\"\");\n  //   } catch {\n  //     console.log(\"error\");\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   if (receivedMessage != null && receivedMessage.chatId === chat._id) {\n  //     setMessages([...messages, receivedMessage]);\n  //   }\n  // }, [receivedMessage]);\n\n  // useEffect(() => {\n  //   scroll.current?.scrollIntoView({ behavior: \"smooth\" });\n  // }, [messages]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  // <>\n  //   {chat ? (\n  //     <>\n  //       <div className=\"flex flex-col flex-auto h-full p-1 lg:sticky top-0\">\n  //         <div className=\"bg-white p-4 mb-2 sticky top-0 z-10 flex items-center justify-between\">\n  //           {!reciverDetails ? (\n  //             <></>\n  //           ) : (\n  //             <div className=\"flex items-center\">\n  //               <div className=\"flex items-center justify-center h-8 w-8 bg-indigo-200 rounded-full\">\n  //                 {reciverDetails.name.charAt(0)}\n  //               </div>\n  //               <div className=\"ml-4\">\n  //                 <h1 className=\"text-lg font-semibold inline\">{reciverDetails.name}</h1>\n  //               </div>\n  //             </div>\n  //           )}\n  //         </div>\n  //         <div className=\"flex-1 overflow-y-auto\">\n  //           <div className=\"max-w-full mx-auto h-full flex flex-col justify-between\">\n  //             <div className=\"flex-1 flex flex-col space-y-2 shadow-md p-4 rounded-lg bg-white overflow-y-auto\">\n  //               {messages.length > 0 &&\n  //                 messages.map((message, index) => (\n  //                   <div\n  //                     key={index}\n  //                     className={`col-start-6 col-end-13 p-3 rounded-lg ${\n  //                       message.senderId === loggedInUser ? 'flex-row-reverse' : 'flex-row'\n  //                     }`}\n  //                   >\n  //                     {message.senderId === loggedInUser ? (\n  //                       <div className=\"flex flex-col items-end\">\n  //                         <span className=\"text-sm text-gray-600\">You</span>\n  //                         <div className=\"flex items-end justify-end\">\n  //                           <div ref={scroll} className=\"bg-gray-300 text-gray-700 p-2 rounded-lg max-w-xs\">\n  //                             {message.text}\n  //                           </div>\n  //                         </div>\n  //                         {/* <div className=\"text-xs text-gray-600 self-end mt-1\">{format(message.createdAt)}</div> */}\n  //                       </div>\n  //                     ) : (\n  //                       <div className=\"flex flex-col items-start\">\n  //                         <span className=\"text-sm text-gray-600\">Sender</span>\n  //                         <div className=\"flex items-end\">\n  //                           <div ref={scroll} className=\"bg-blue-500 text-white p-2 rounded-lg max-w-xs\">\n  //                             {message.text}\n  //                           </div>\n  //                         </div>\n  //                         {/* <div className=\"text-xs text-gray-600 self-start mt-1\">{format(message.createdAt)}</div> */}\n  //                       </div>\n  //                     )}\n  //                   </div>\n  //                 ))}\n  //             </div>\n  //           </div>\n  //           <div className=\"bg-white p-4 flex-shrink-0 sticky bottom-0 z-10\">\n  //             <div className=\"flex\">\n  //               <input\n  //                 type=\"text\"\n  //                 placeholder=\"Type a message...\"\n  //                 className=\"flex-1 border rounded-full p-2 mr-2\"\n  //                 onChange={handleChange}\n  //                 value={newMessage}\n  //               />\n  //               <button className=\"bg-blue-500 text-white p-2 rounded-full\" onClick={handleClick}>\n  //                 Send\n  //               </button>\n  //             </div>\n  //           </div>\n  //         </div>\n  //       </div>\n  //     </>\n  //   ) : (\n  //     <div className=\"flex justify-center items-center h-screen \">\n  //       <p className=\"text-2xl\">\n  //         <span className=\"text-gray-500\">Tap on chat to start the conversation.</span>\n  //       </p>\n  //     </div>\n  //   )}\n  // </>\n  ;\n}\n_c = ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","Fragment","_Fragment","jsxDEV","_jsxDEV","ChatBox","chat","loggedInUser","setSendMessage","receivedMessage","_c","$RefreshReg$"],"sources":["/Users/rohit/Desktop/lost/Frontend/src/components/ChatBox.js"],"sourcesContent":["import React from 'react';\n// import { format } from \"timeago.js\";\n// import { addMessage, getMessages } from '../actions/chatActions';\n// import { getUserDetails } from '../actions/auth';\n\nexport default function ChatBox({ chat, loggedInUser, setSendMessage, receivedMessage }) {\n  // const [reciverDetails, setReciverDetails] = useState();\n  // const [messages, setMessages] = useState([]);\n  // const [newMessage, setNewMessage] = useState(\"\");\n  // const scroll = useRef();\n\n  // useEffect(() => {\n  //   if (chat) {\n  //     const userId = chat.members.find((id) => id !== loggedInUser);\n  //     fetchUserDetails(userId);\n  //   }\n  // }, [chat]);\n\n  // const fetchUserDetails = async (id) => {\n  //   // const data = await getUserDetails(id);\n  //   // setReciverDetails(data);\n  // };\n\n  // useEffect(() => {\n  //   const fetchMessages = async () => {\n  //     try {\n  //       // const data = await getMessages(chat._id);\n  //       // setMessages(data);\n  //     } catch (error) {\n  //       console.log(error);\n  //     }\n  //   };\n\n  //   if (chat !== null) fetchMessages();\n  // }, [chat]);\n\n  // const handleChange = (e) => {\n  //   setNewMessage(e.target.value);\n  // };\n\n  // const handleClick = async (e) => {\n  //   e.preventDefault();\n    \n  //   if (!newMessage.trim()) {\n  //     return;\n  //   }\n\n  //   const textMessage = {\n  //     senderId: loggedInUser,\n  //     text: newMessage,\n  //     chatId: chat._id,\n  //   };\n\n  //   const receiverId = chat.members.find((id) => id !== loggedInUser);\n\n  //   setSendMessage({ ...textMessage, receiverId });\n\n  //   try {\n  //     // const data = await addMessage(textMessage);\n  //     // setMessages([...messages, data]);\n  //     setNewMessage(\"\");\n  //   } catch {\n  //     console.log(\"error\");\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   if (receivedMessage != null && receivedMessage.chatId === chat._id) {\n  //     setMessages([...messages, receivedMessage]);\n  //   }\n  // }, [receivedMessage]);\n\n  // useEffect(() => {\n  //   scroll.current?.scrollIntoView({ behavior: \"smooth\" });\n  // }, [messages]);\n\n  return (\n    <>\n    \n    </>\n    // <>\n    //   {chat ? (\n    //     <>\n    //       <div className=\"flex flex-col flex-auto h-full p-1 lg:sticky top-0\">\n    //         <div className=\"bg-white p-4 mb-2 sticky top-0 z-10 flex items-center justify-between\">\n    //           {!reciverDetails ? (\n    //             <></>\n    //           ) : (\n    //             <div className=\"flex items-center\">\n    //               <div className=\"flex items-center justify-center h-8 w-8 bg-indigo-200 rounded-full\">\n    //                 {reciverDetails.name.charAt(0)}\n    //               </div>\n    //               <div className=\"ml-4\">\n    //                 <h1 className=\"text-lg font-semibold inline\">{reciverDetails.name}</h1>\n    //               </div>\n    //             </div>\n    //           )}\n    //         </div>\n    //         <div className=\"flex-1 overflow-y-auto\">\n    //           <div className=\"max-w-full mx-auto h-full flex flex-col justify-between\">\n    //             <div className=\"flex-1 flex flex-col space-y-2 shadow-md p-4 rounded-lg bg-white overflow-y-auto\">\n    //               {messages.length > 0 &&\n    //                 messages.map((message, index) => (\n    //                   <div\n    //                     key={index}\n    //                     className={`col-start-6 col-end-13 p-3 rounded-lg ${\n    //                       message.senderId === loggedInUser ? 'flex-row-reverse' : 'flex-row'\n    //                     }`}\n    //                   >\n    //                     {message.senderId === loggedInUser ? (\n    //                       <div className=\"flex flex-col items-end\">\n    //                         <span className=\"text-sm text-gray-600\">You</span>\n    //                         <div className=\"flex items-end justify-end\">\n    //                           <div ref={scroll} className=\"bg-gray-300 text-gray-700 p-2 rounded-lg max-w-xs\">\n    //                             {message.text}\n    //                           </div>\n    //                         </div>\n    //                         {/* <div className=\"text-xs text-gray-600 self-end mt-1\">{format(message.createdAt)}</div> */}\n    //                       </div>\n    //                     ) : (\n    //                       <div className=\"flex flex-col items-start\">\n    //                         <span className=\"text-sm text-gray-600\">Sender</span>\n    //                         <div className=\"flex items-end\">\n    //                           <div ref={scroll} className=\"bg-blue-500 text-white p-2 rounded-lg max-w-xs\">\n    //                             {message.text}\n    //                           </div>\n    //                         </div>\n    //                         {/* <div className=\"text-xs text-gray-600 self-start mt-1\">{format(message.createdAt)}</div> */}\n    //                       </div>\n    //                     )}\n    //                   </div>\n    //                 ))}\n    //             </div>\n    //           </div>\n    //           <div className=\"bg-white p-4 flex-shrink-0 sticky bottom-0 z-10\">\n    //             <div className=\"flex\">\n    //               <input\n    //                 type=\"text\"\n    //                 placeholder=\"Type a message...\"\n    //                 className=\"flex-1 border rounded-full p-2 mr-2\"\n    //                 onChange={handleChange}\n    //                 value={newMessage}\n    //               />\n    //               <button className=\"bg-blue-500 text-white p-2 rounded-full\" onClick={handleClick}>\n    //                 Send\n    //               </button>\n    //             </div>\n    //           </div>\n    //         </div>\n    //       </div>\n    //     </>\n    //   ) : (\n    //     <div className=\"flex justify-center items-center h-screen \">\n    //       <p className=\"text-2xl\">\n    //         <span className=\"text-gray-500\">Tap on chat to start the conversation.</span>\n    //       </p>\n    //     </div>\n    //   )}\n    // </>\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,eAAe,SAASC,OAAOA,CAAC;EAAEC,IAAI;EAAEC,YAAY;EAAEC,cAAc;EAAEC;AAAgB,CAAC,EAAE;EACvF;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,oBACEL,OAAA,CAAAF,SAAA,mBAEE;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAEJ;AAACQ,EAAA,GA3JuBL,OAAO;AAAA,IAAAK,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}